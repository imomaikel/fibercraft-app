generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Temp
// TODO
model Server {
  id          Int     @id @default(autoincrement())
  mapName     String  @db.VarChar(45)
  path        String  @db.VarChar(200)
  gameMode    String  @db.VarChar(45)
  gameType    String  @db.VarChar(45)
  autoRestart Int     @db.TinyInt
  customName  String? @db.VarChar(45)
  multiHome   String? @db.VarChar(45)
  queryPort   Int
  rconPort    Int
  lastStatus  String  @default("offline") @db.VarChar(45)
  lastPlayers Int     @default(0) @db.TinyInt
  position    Int     @default(1) @db.TinyInt
}

// 

enum TribePosition {
  PROMOTE
  DEMOTE
  SAME
}

model Tribe {
  tribeId      Int           @id
  tribeName    String        @db.TinyText
  points       Int           @default(0)
  position     Int?
  newScoreMode TribePosition @default(PROMOTE)
}

model TribeLog {
  id             BigInt   @id
  tribeId        Int
  tribeName      String
  content        String
  possiblePoints Boolean
  timestamp      DateTime
}

model Building {
  id Int @id @default(autoincrement())

  label  String
  points Int?
}

model Widget {
  id Int @id @default(autoincrement())

  // Tribe Score
  tribeScoreChannelId String? @db.TinyText
  tribeScoreMessageId String? @db.TinyText

  guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String @unique
}

model Guild {
  id String @id @unique

  name String @db.TinyText

  widgets Widget?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Config {
  id Int @id @default(autoincrement())

  rconPassword String @default("")
}

model RconLog {
  id BigInt @id @default(autoincrement())

  executedBy String
  command    String
  servers    String

  createdAt DateTime @default(now())
}

// Website
enum ManagementPermission {
  ALL_PERMISSIONS @map("All Permissions")
  SERVER_RESTART  @map("Server Restart")
}

model UserPermission {
  id         Int                  @id @default(autoincrement())
  permission ManagementPermission

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
}

// Auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id String @id @default(cuid())

  discordId     String?
  name          String?
  accounts      Account[]
  image         String?
  email         String?          @unique
  emailVerified DateTime?
  permissions   UserPermission[]

  createdAt DateTime @default(now())
}
