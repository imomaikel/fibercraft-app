generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Widget {
  id Int @id @default(autoincrement())

  // Tribe Score
  tribeScoreChannelId String? @db.TinyText
  tribeScoreMessageId String? @db.TinyText

  // Server Control
  serverControlLogChannelId String? @db.TinyText
  serverControlChannelId    String? @db.TinyText
  serverControlMessageId    String? @db.TinyText
  serverControlRoleId       String? @db.TinyText

  guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String @unique
}

model TribeLog {
  id        BigInt   @id
  tribeId   Int
  tribeName String
  content   String
  timestamp DateTime
}

model Guild {
  id String @id @unique

  name String @db.TinyText

  widgets  Widget?
  panelLog PanelLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Config {
  id Int @id @default(autoincrement())

  rconPassword                 String   @default("")
  tribeScoreUpdateDelayMinutes Int      @default(60)
  tribeScoreLastUpdate         DateTime @default(now())
}

model RconLog {
  id BigInt @id @default(autoincrement())

  executedBy String
  command    String
  servers    String

  createdAt DateTime @default(now())
}

model PanelLog {
  id BigInt @id @default(autoincrement())

  userDiscordId String @db.TinyText
  username      String @db.TinyText
  content       String

  guild   Guild?  @relation(fields: [guildId], references: [id])
  guildId String?

  createdAt DateTime @default(now())
}

// Website
enum ManagementPermission {
  USER                 @map("User")
  ALL_PERMISSIONS      @map("All Permissions")
  SERVER_CONTROL       @map("Server Control")
  VIEW_PAIRED_ACCOUNTS @map("View Paired Accounts")
  USE_WIDGETS          @map("Use Widgets")
  VIEW_LOGS            @map("View Logs")
  ADVANCED_SEARCH      @map("Advanced Search")
}

model UserPermission {
  id         Int                  @id @default(autoincrement())
  permission ManagementPermission

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
}

// Auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id String @id @default(cuid())

  discordId     String?          @unique
  name          String?
  accounts      Account[]
  image         String?
  email         String?          @unique
  emailVerified DateTime?
  permissions   UserPermission[]

  selectedDiscordId String?

  createdAt DateTime @default(now())
}

// In-Game plugin
enum TribeScorePosition {
  PROMOTE
  DEMOTE
  KEEP
}

model TribeScore {
  tribeId   BigInt             @id
  tribeName String             @db.VarChar(64)
  score     Int                @default(0)
  oldScore  Int                @default(0)
  position  Int                @default(0)
  progress  Int                @default(0)
  mode      TribeScorePosition @default(PROMOTE)
}

model TribeScoreAdminDisabledId {
  steamId String @id @db.VarChar(32)
}

model TribeScorePlayerDisabledId {
  steamId String @id @db.VarChar(32)
}
