generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Widget {
  id Int @id @default(autoincrement())

  // Tribe Score
  tribeScoreChannelId String? @db.TinyText
  tribeScoreMessageId String? @db.TinyText

  // Testimonials
  testimonialsChannelId String? @db.TinyText
  testimonialsMessageId String? @db.TinyText
  testimonialsRoleId    String? @db.TinyText

  // Discord Link
  discordLinkChannelId String? @db.TinyText
  discordLinkMessageId String? @db.TinyText

  // RCON Logs
  rconLogsChannelId String? @db.TinyText

  guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String @unique

  @@map("widget")
}

enum BoostAction {
  START
  END
}

model DiscordBoost {
  id String @id @default(cuid())

  discordId String
  action    BoostAction
  executed  Boolean     @default(false)
  isLinked  Boolean

  createdAt DateTime @default(now())

  @@map("discordboost")
}

enum TestimonialStatus {
  WAITING
  APPROVED
  REJECTED
}

model Testimonial {
  id Int @id @default(autoincrement())

  messageId       String            @unique
  discordId       String            @db.TinyText
  discordUsername String            @db.TinyText
  content         String            @db.Text
  status          TestimonialStatus @default(WAITING)

  createdAt DateTime @default(now())

  @@map("testimonial")
}

model TribeLog {
  id        BigInt   @id
  tribeId   Int
  tribeName String
  content   String
  timestamp DateTime

  @@map("tribelog")
}

model Guild {
  id String @id @unique

  name String @db.TinyText

  widgets  Widget?
  panelLog PanelLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("guild")
}

model Config {
  id Int @id @default(autoincrement())

  lastWipe        DateTime @default(now())
  nextWipe        DateTime @default(now())
  wipeDelayInDays Int      @default(14)

  kickButtonUse Int @default(0)

  serverIp String @default("103.214.68.111")

  rconPassword                 String   @default("")
  tribeScoreUpdateDelayMinutes Int      @default(60)
  tribeScoreLastUpdate         DateTime @default(now())

  @@map("config")
}

model RconLog {
  id BigInt @id @default(autoincrement())

  executedBy String
  command    String
  servers    String

  createdAt DateTime @default(now())

  @@map("rconlog")
}

model PanelLog {
  id BigInt @id @default(autoincrement())

  userDiscordId String @db.TinyText
  username      String @db.TinyText
  content       String

  guild   Guild?  @relation(fields: [guildId], references: [id])
  guildId String?

  createdAt DateTime @default(now())

  @@map("panellog")
}

// Website
enum ManagementPermission {
  USER                 @map("User")
  ALL_PERMISSIONS      @map("All Permissions")
  SERVER_CONTROL       @map("Server Control")
  VIEW_PAIRED_ACCOUNTS @map("View Paired Accounts")
  USE_WIDGETS          @map("Use Widgets")
  VIEW_LOGS            @map("View Logs")
  ADVANCED_SEARCH      @map("Advanced Search")
  WEBSITE_CONTROL      @map("Website Control")
  PLUGIN_CONFIG        @map("Plugin Config")
  ALL_RCON_COMMANDS    @map("All RCON Commands")
}

model UserPermission {
  id         Int                  @id @default(autoincrement())
  permission ManagementPermission

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())

  @@map("userpermission")
}

// Auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

enum StoreMethod {
  STEAM
  EPIC
}

model User {
  id String @id @default(cuid())

  discordId     String?          @unique
  name          String?
  accounts      Account[]
  image         String?
  email         String?          @unique
  emailVerified DateTime?
  permissions   UserPermission[]

  basketIdent     String?          @unique
  basketAuthUrl   String?          @db.Text
  previousBaskets PreviousBasket[]

  totalPaid   Float       @default(0)
  epicId      String?
  storeMethod StoreMethod @default(STEAM)

  selectedDiscordId String?

  createdAt DateTime @default(now())

  @@map("user")
}

model Staff {
  id Int @id @default(autoincrement())

  designation String   @db.TinyText
  image       String?
  name        String   @db.TinyText
  joinedAt    DateTime

  @@map("staff")
}

// In-Game plugin
enum TribeScorePosition {
  PROMOTE
  DEMOTE
  KEEP
}

model TribeScore {
  tribeId   BigInt             @id
  tribeName String             @db.VarChar(64)
  score     Int                @default(0)
  oldScore  Int                @default(0)
  position  Int                @default(0)
  progress  Int                @default(0)
  mode      TribeScorePosition @default(PROMOTE)

  @@map("tribescore")
}

model TribeScoreAdminDisabledId {
  steamId String @id @db.VarChar(32)

  @@map("tribescoreadmindisabledid")
}

model TribeScorePlayerDisabledId {
  steamId String @id @db.VarChar(32)

  @@map("tribescoreplayerdisabledid")
}

// Store
model PreviousBasket {
  ident String @id @unique

  username      String  @default("Unknown")
  usernameId    String  @default("Unknown")
  completed     Boolean @default(false)
  transactionId String  @default("")
  pricePaid     Float   @default(0)
  tax           Float   @default(0)

  products BasketProduct[]

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("previousbasket")
}

model BasketProduct {
  id BigInt @id @default(autoincrement())

  productId Int
  name      String
  quantity  Int
  price     Float

  previousBasket      PreviousBasket @relation(fields: [previousBasketIdent], references: [ident], onDelete: Cascade)
  previousBasketIdent String

  @@map("basketproduct")
}

model BasketLink {
  linkId String  @id @default(cuid())
  ident  String? @unique

  @@map("basketlink")
}

model Event {
  id Int @id @default(autoincrement())

  text String @db.Text

  expireAt  DateTime
  createdAt DateTime @default(now())

  @@map("event")
}
